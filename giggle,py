#!/usr/bin/env python
# -*- coding:utf-8 -*-
# __author__ = '40kuai'

"""
1. 检测ncdu命令。根据系统进行安装。
2. 使用ncdu命令生成相关文件信息文件。
3. 对文件进行处理。
"""

import os
import sys
import json


class InstallError(Exception):
    def __init__(self, msg):
        self.message = msg

    def __str__(self):
        return self.message


class InstallNcdu():
    """检测ncdu命令。根据系统进行安装。"""

    def __init__(self):
        self.system_name = sys.platform
        self.install_stutus = False
        if self.system_name == 'linux2':
            ret_status = os.system('yum -y install ncdu')
            if ret_status == 0:
                self.install_stutus = True


class FilterFile():
    """通过处理文件，按照给定大小筛选大文件"""

    def __init__(self, check_dir='/', file_path='/tmp/', file_name='ncdu.json'):
        install_ncdu = InstallNcdu()
        if not install_ncdu.install_stutus:
            raise InstallError('install ncdu error')
        self.dir_list = []
        self.check_dir = check_dir
        self.file_path = file_path
        self.file_name = file_name
        self.all_string = None
        self.create_file_status = self.create_file()

    def create_file(self):
        """ncdu创建文件"""
        ncdu_file_path = os.path.join(self.file_path, self.file_name)
        create_file_cmd = 'ncdu %s -o %s%s' % (self.check_dir, self.file_path, self.file_name)
        ret_id = os.system(create_file_cmd)
        if ret_id == 0:
            with open(ncdu_file_path, ) as file:
                self.all_string = json.load(file)
            return True
        else:
            return False

    def print_size(self, list_obj, size=102400):
        """输出文件大小大于 102400"""
        if isinstance(list_obj, list):
            for i in list_obj:
                self.dir_list.append(list_obj[0]['name'])
                self.print_size(i)
                self.dir_list.pop()
        else:
            if isinstance(list_obj, dict) and 'asize' in list_obj:
                if list_obj['asize'] > size:
                    print '大文件：', list_obj, '路径：', ''.join(self.dir_list)

    def print_f(self, size=None, top=None):

        self.print_size(self.all_string, size=size)


if __name__ == '__main__':
    obj = FilterFile()
    obj.print_top()
